-strongly typed language
-DateTime!!!
-expression bodied members
-string.Format
-string interpolation : $"{firstName}-{lastName}"
-parsing
-AddTwoNumbers(int a, ref int b); - trb intitalizat
-AddTwoNumbers(int a, out int b); - nu trb sa fie initializat, dar trb sa aba o val in metoda
-int? a = 10; int? b =null;
-GC.collect()
-records - nu poti schimba valoarea dntr-un record
-Employee[] = new Employee[7];
 foreach(Employee e in employees)
 { e.DisplayDetails();
   var nrOfHoursWorked = new Random().Next(25);
   e.PerformWork(nrOfHoursWorked);
 }
-array - copyTo(dai si poz de la care sa copieze), sort, reverse, length 


Object Oriented 
-> principles : 
encapsulation
abstraction
inheritance
polymorphism

->ENCAPSULATION
contining info inside object
only certain info is exposed
hides internal implementation and data(ex masina)
avoid data corruption
private and public
PUBLIC - everyone can change the data
PRIVATE - nu poti modifica valoarea din afara clasei
- poti prin metode declarate public
- poti prin PROPERTIES
C# PROPERTIES - WRAPS DATA OF A CLASS
              - HIDE IMPLEMENTATION
              - DEFINE GET AND SET IMPLEMENTATION
-prin properties accesezi data care e incapsulata in clasa

->ABSTRACTION
abstract representation of the program
only mechanism useful for other objects are revealed
implementation is hidden
making changes easier

->INHERITANCE
classes can reuse functionality from others
relation between classes
lower development time because of reusability
parent(or base) and derived class
reuse code
easier to maintain
can be one or more levels deep
public class Manager: Employee
access modifiers - protected - in inheritance, poti accesa din clasa parinte in clasa copil, 
					in rest e private
		     - private and public
is-a relation
has-a reltion

->POLYMORPHISM
share behaviours but can be in more than one form
child can be used like its parent
correct method will be used on execution
-override a base class method with a new implementation
-"poly", "morph"
-virtual and override - keywords 
-new version of method
-the most spcific implementation based on the type of actual object

INTERFACES
-a contract that must be implemented by classes that use it
-public void Manager: IEmployee
-cannot instatiate
-IEmployee e1 = new Manager();
-toate metodele def trb implementate in clasa

TESTE - debugger
      - UNIT test - arrange, act, assert - xUnit
                  - [Fact]

System.IO.File
-Directory, Class, File
-string path = @"..."
 if(File.Exists(path)){...}
-file, fileStream, StreamReader, StreamWriter
-split, susbstring - read and write text

Errors and exceptions
-try/catch
-finaly block